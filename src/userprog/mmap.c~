/* File: src/userprog/mmap.c */

#include "userprog/mmap.h"
#include <debug.h>
#include <bitmap.h>
#include "threads/thread.h"
#include "threads/vaddr.h"
#include "threads/malloc.h"
#include "userprog/syscall.h"
#include "userprog/pagedir.h"    /* pagedir_get_page, pagedir_set_page, pagedir_is_dirty, pagedir_clear_page */
#include "vm/page.h"             /* sup_page_install, sup_page_lookup, sup_page_remove */
#include "userprog/syscall.h"
#include "vm/frame.h"            /* frame_free, frame_lookup_by_kpage */
#include "filesys/file.h"        /* file_reopen, file_length, file_read_at, file_write_at, file_close */


/*---------------------------------------------------------------------------*/
/* mmap_table_init: 스레드가 시작될 때 mmap_list와 next_mapid를 초기화        */
/*---------------------------------------------------------------------------*/
void
mmap_table_init(struct thread *t) {
    list_init(&t->mmap_list);
    t->next_mapid = 0;
}

/*---------------------------------------------------------------------------*/
/* handle_mmap: SYS_MMAP 시스템 콜의 실제 구현                               */
/*   fd      : 매핑할 파일 디스크립터                                         */
/*   addr    : 사용자 가상 주소 (반드시 페이지 정렬되어야 함)                   */
/*---------------------------------------------------------------------------*/
int
handle_mmap(int fd, void *addr) {
    struct thread *t = thread_current();
    struct file *orig_file;
    off_t file_len;
    size_t length, i;

    /* 1) 인자 검증 */
    orig_file = process_get_file_by_fd(fd);
    if (orig_file == NULL                               /* 유효하지 않은 fd */
        || addr == NULL                                 /* NULL 주소 */
        || pg_ofs(addr) != 0                            /* 페이지 정렬 아님 */
        || addr >= PHYS_BASE)                           /* 사용자 영역을 벗어남 */
    {
        return -1;
    }

    /* 2) 파일 크기 조회 */
    file_len = file_length(orig_file);
    if (file_len == 0) {
        return -1;
    }

    /* 3) 매핑할 전체 바이트 수를 PGSIZE 단위로 올림 */
    length = ((size_t) file_len + PGSIZE - 1) & ~PGMASK;

    /* 4) 가상 주소 범위 및 중복 검사 */
    for (i = 0; i < length; i += PGSIZE) {
        void *upage = addr + i;
        if (upage >= PHYS_BASE) {
            /* 커널 영역과 겹치면 안됨 */
            return -1;
        }
        /* 이미 SPT에 등록되었거나 페이지 테이블에 매핑된 경우 */
        if (sup_page_lookup(t, upage) != NULL ||
            pagedir_get_page(t->pagedir, upage) != NULL) {
            return -1;
        }
    }

    /* 5) mmap_entry 구조체 생성 및 리스트에 추가 */
    struct mmap_entry *me = malloc(sizeof *me);
    if (me == NULL) {
        return -1;
    }
    me->mapid = t->next_mapid++;
    me->file = file_reopen(orig_file);
    me->ofs = 0;
    me->length = length;
    me->upage = addr;
    list_push_back(&t->mmap_list, &me->elem);

    /* 6) SPT에 PAGE_MMAP 타입 엔트리 등록 */
    for (i = 0; i < length; i += PGSIZE) {
        size_t read_bytes = PGSIZE;
        size_t zero_bytes = 0;
        /* 마지막 페이지인 경우 파일 끝에서 남은 바이트만 읽고 나머지 0으로 채움 */
        if (i + PGSIZE > (size_t) file_len) {
            read_bytes = file_len - i;
            zero_bytes = PGSIZE - read_bytes;
        }
        sup_page_install(
            t,
            addr + i,          /* 사용자 가상 주소 (페이지 경계) */
            PAGE_MMAP,         /* mmap 타입 */
            me->file,          /* 복제된 파일 핸들 */
            i,                 /* 파일 내 오프셋 (바이트) */
            read_bytes,        /* 읽을 바이트 수 */
            zero_bytes,        /* 0으로 채울 바이트 수 */
            true               /* 쓰기 가능 */
        );
    }

    return me->mapid;
}

/*---------------------------------------------------------------------------*/
/* handle_munmap: SYS_MUNMAP 시스템 콜의 실제 구현                            */
/*   mapid : 해제할 매핑 ID                                                   */
/*---------------------------------------------------------------------------*/
void
handle_munmap(int mapid) {
    struct thread *t = thread_current();
    struct list_elem *e;

    /* 1) mmap_list를 순회하여 mapid가 일치하는 엔트리 찾기 */
    for (e = list_begin(&t->mmap_list); e != list_end(&t->mmap_list); e = list_next(e)) {
        struct mmap_entry *me = list_entry(e, struct mmap_entry, elem);
        if (me->mapid == mapid) {
            size_t i;

            /* 2) 해당 mmap_entry의 모든 페이지 처리 */
            for (i = 0; i < me->length; i += PGSIZE) {
                void *uaddr = me->upage + i;
                struct sup_page *sp = sup_page_lookup(t, uaddr);
                if (sp != NULL) {
                    void *kpage = pagedir_get_page(t->pagedir, uaddr);
                    if (kpage != NULL) {
                        /* 2-1) Dirty 비트 검사 후 파일에 쓰기 */
                        if (pagedir_is_dirty(t->pagedir, uaddr)) {
                            file_write_at(me->file, kpage, sp->read_bytes, sp->ofs);
                        }
                        /* 2-2) 물리 프레임 해제 */
                        struct frame *f = frame_lookup_by_kpage(kpage);
                        if (f != NULL) {
                            frame_free(f);
                        }
                        /* 2-3) 페이지 디렉토리 엔트리 제거 */
                        pagedir_clear_page(t->pagedir, uaddr);
                    }
                    /* 2-4) 보조 페이지 테이블(SPT) 엔트리 제거 */
                    sup_page_remove(t, sp);
                }
            }

            /* 3) 파일 닫기, mmap_entry 리스트에서 제거, 메모리 해제 */
            file_close(me->file);
            list_remove(&me->elem);
            free(me);
            break;
        }
    }
}

